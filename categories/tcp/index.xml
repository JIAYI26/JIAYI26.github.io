<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>TCP on JIAYI&#39;s Blog</title>
    <link>https://jiayi26.github.io/categories/tcp/</link>
    <description>Recent content in TCP on JIAYI&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 28 Oct 2022 21:33:57 +0800</lastBuildDate><atom:link href="https://jiayi26.github.io/categories/tcp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TCPTCP三次握手和四次挥手</title>
      <link>https://jiayi26.github.io/posts/tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</link>
      <pubDate>Fri, 28 Oct 2022 21:33:57 +0800</pubDate>
      
      <guid>https://jiayi26.github.io/posts/tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</guid>
      <description>TCP三次握手 (1)第一次握手：客户端发送连接请求报文，SYN=1，seq=x，进入 SYN_SENT 状态，等待服务器确认 (2)第二次握手：服务器收到请求报文，确认请求报文后发送 SYN+ack 包，SYN=1，ack=x+1，seq=y，进入 SYN_RECV 状态 (3)第三次握手：客户端收到服务器的 SYN+ack 包，向服务器发送 ack 包 SYN=1，ack=y+1，seq=x+1，进入ESTABLISHED状态
 序列号(Sequence Number)：发送数据包中的第一个字节的序列号，保证网络传输数据的有序性 确认应答号(Acknowledgement Number)：表示已经收到数据包，用来解决网络中丢包的问题 ACK：为1时，确认应答号有效 SYN：为1时，发起一个连接（在建立TCP连接的时候使用） FIN：为1时，关闭一个连接（在关闭TCP连接的时候使用）
 TCP四次挥手 (1)第一次挥手：客户端进程发出连接释放报文，FIN=1，seq=u，客户端进入 FIN-WAIT-1（终止等待1）状态 (2)第二次挥手：服务器收到连接释放报文，发出确认报文 ack=u+1，seq=v，进入了CLOSE-WAIT（关闭等待）状态。这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间 (3)第三次挥手：客户端收到服务器的确认请求后，客户端就进入FIN-WAIT-2（终止等待2）状态。等待服务器发送连接释放报文。服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，seq=w，进入了LAST-ACK（最后确认）状态。 (4)第四次挥手：客户端收到服务器的连接释放报文后，发出确认报文 ack=w+1，seq=u+1，客户端就进入了TIME-WAIT（时间等待）状态。此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间，才进入CLOSED状态
为什么连接的时候是三次握手，关闭的时候却是四次握手？ 当客户端发出FIN报文时，只是表示Client已经没有数据要发送了，这个时候Client还是可以接受来自Server的数据。当Server收到FIN报文时，会先回复一个ACK报文，告诉Client，&amp;ldquo;你发的FIN报文我收到了&amp;rdquo;。只有等Server所有的报文都发送完，才会发送FIN报文。
为什么要等待2MSL？ 为了保证Client发送的最后一个ACK报文段能够到达Server Client发送的ACK报文可能丢失，Server如果没有收到ACK，将不断重复发送FIN报文。Client会设置一个计时器，等待2MSL的时间。如果在该时间内再次收到FIN，那么Client会重发ACK报文并再次等待2MSL
 MSL：报文段最大生存时间，它是任何报文段被丢弃前在网络内的最长时间。
 防止已经失效的连接请求报文段出现在新连接中 Client在发送完最后一个ACK报文段后，再经过时间2MSL。就可以使本连接持续的时间内所产生的所有报文段都在网络中消失。这样就可以在下一个新的连接中不会出现这种旧的连接请求报文段。</description>
    </item>
    
  </channel>
</rss>
