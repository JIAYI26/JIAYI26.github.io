<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Git on JIAYI&#39;s Blog</title>
    <link>https://jiayi26.github.io/tags/git/</link>
    <description>Recent content in Git on JIAYI&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 25 Nov 2022 17:19:25 +0800</lastBuildDate><atom:link href="https://jiayi26.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git</title>
      <link>https://jiayi26.github.io/posts/git/</link>
      <pubDate>Fri, 25 Nov 2022 17:19:25 +0800</pubDate>
      
      <guid>https://jiayi26.github.io/posts/git/</guid>
      <description>1. Git的概述 Git 是一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种项目。
2. 什么是版本控制？ 记录文件内容变化，最重要的是记录文件修改历史记录。
3. Git的三种状态  已修改（modified） - 已修改表示修改了文件，但还没保存到数据库中 已暂存（staged） - 已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中 已提交（committed） - 已提交表示数据已经安全的保存在本地数据库中  4. Git的四个区域  工作区（workspace）：当你 git clone 一个项目到本地，相当于在本地克隆了项目的一个副本。工作区是对项目的某个版本独立提取出来的内容。这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改 暂存区（staging area）：暂存区是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。有时候也被称作 ‘索引’，不过一般说法还是叫暂存区 本地仓库（local repository）：提交更新，找到暂存区域的文件，将快照永久性存储到 Git 本地仓库 远程仓库（remote repository）：以上几个工作区都是在本地。为了让别人可以看到你的修改，你需要将你的更新推送到远程仓库。同理，如果你想同步别人的修改，你需要从远程仓库拉取更新  5. Git命令    命令 说明     git config &amp;ndash;global user.name 用户名 设置用户签名   git config &amp;ndash;global user.email email地址 设置用户email地址   git init 初始化本地库   git clone 远程库地址 从远程库克隆到本地   git status 查看本地库状态   git add 添加文件到暂存区   git restore &amp;ndash;staged 文件名 复位在暂存区的文件(add反悔药)   git rm &amp;ndash;cached 文件名 移除在暂存区的文件(add反悔药)   git commit -m “备注文本” 文件名 提交暂存区文件到本地库（文件名缺省时，将暂存区所有文件提交）   git reset &amp;ndash;hard 版本号 版本间穿梭(配合git reflog使用)   git reset &amp;ndash;hard HEAD^ 穿梭到上一个版本   git branch 列出所有分支   git branch 分支名 创建分支   git checkout 分支名 切换分支   git merge 分支名B 分支B合并到A(A为当前工作目录所处分支)   git branch -d 分支名 删除分支   git remote add 别名 远程仓库地址 添加远程库   git remote -v 查看添加过的远程库   git push 远程库地址或其别名 分支名 推送到远程库   git pull 远程库地址或其别名 分支名 下载远程代码并合并   git diff 比较文件的不同   git log 查看历史提交记录   git reflog 可以查看所有分支的所有操作记录    Git常用命令演示 5.</description>
    </item>
    
  </channel>
</rss>
